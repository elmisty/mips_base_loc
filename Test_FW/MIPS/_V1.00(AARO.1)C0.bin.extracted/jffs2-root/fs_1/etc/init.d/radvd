#!/bin/sh /etc/rc.common
# Copyright (C) 2008  Alina Friedrichsen <x-alina@gmx.net>
. /etc/functions.sh

START=50

## WenHsien: Function to calculate masked prefix.2014.0428
calc_masked_prefix() {
	## Calculate a 64-bit prefix to set into LAN interface.
	address=$1
	prefixlen=$2
	local prefix=""
	local masked_address=$address
	[ "$prefixlen" != "64" ] && {
		
		## Step 1: get Three Subsets of IP (1~48, 49~64, and 65~128)
		## loop for 4 times to find each subset.
		tmpaddr=$address
		pos=`expr index "$tmpaddr" :`
		lengthofip1to48=$((lengthofip1to48+pos))
		[ "$pos" = "0" ] && return 0
		tmpaddr=${tmpaddr:$pos}

		pos=`expr index "$tmpaddr" :`
		lengthofip1to48=$((lengthofip1to48+pos))
		[ "$pos" = "0" ] && return 0
		tmpaddr=${tmpaddr:$pos}

		pos=`expr index "$tmpaddr" :`
		lengthofip1to48=$((lengthofip1to48+pos))
		ifidpos=$lengthofip1to48
		[ "$pos" = "0" ] && return 0
		tmpaddr=${tmpaddr:$pos}

		pos=`expr index "$tmpaddr" :`
		ifidpos=$((ifidpos+pos))
		[ "$pos" = "0" ] && return 0

		## get ip subset 1
		ipsubset1to48=${address::$lengthofip1to48}
		
		## get ip subset 2
		ipsubset49to64=${tmpaddr::$((pos-1))}
		
		## get ip subset 3
		tmpaddr=${address:$ifidpos}
		pos=`expr index "$tmpaddr" :`
		[ "$pos" = "1" ] && {
			ifid=${tmpaddr:1}
		} || {
			ifid=$tmpaddr
		}


		## Step 2: get Masked Prefix and Composite a new IP for LAN interface.
		## get value of ip49to64
		value49to64=`printf "%d\n" 0x$ipsubset49to64`

		## get the masked prefix 
		zcount=$((64-prefixlen))
		bit=1
		$((bit<<=zcount))

		res=0
		tmpbit=""
		for i in `seq 7 1 16`; do
			[ $(($value49to64 & $bit)) != 0 ] && {
				res=$((res + bit))
				tmpbit=`printf "%s1" $tmpbit`
			} || {
				tmpbit=`printf "%s0" $tmpbit`
			}
			bit=$((bit<<1))
		done
		maskedprefix49to64=`printf "%04x::\n" $res`
		prefix=`printf "%s%s\n" $ipsubset1to48 $maskedprefix49to64`
		
		## Composite a new IP for LAN interface.
		masked_address=`printf "%s%s" $prefix $ifid`
	} || {
		prefix=$address
	}
	echo $prefix $masked_address
}

##check mode,if AP/UR,exit
local sys_mode=$(get_sys_mode)
[ "$sys_mode" == "2" -o "$sys_mode" == "3" ] && exit 0

RADVD_INTERFACE_STRING_OPTIONS='MaxRtrAdvInterval MinRtrAdvInterval MinDelayBetweenRAs AdvLinkMTU AdvReachableTime AdvRetransTimer AdvCurHopLimit AdvDefaultLifetime AdvDefaultPreference HomeAgentLifetime HomeAgentPreference'
RADVD_INTERFACE_BOOLEAN_OPTIONS='IgnoreIfMissing AdvSendAdvert UnicastOnly AdvManagedFlag AdvOtherConfigFlag AdvSourceLLAddress AdvHomeAgentFlag AdvHomeAgentInfo AdvMobRtrSupportFlag AdvIntervalOpt'

RADVD_PREFIX_STRING_OPTIONS='AdvValidLifetime AdvPreferredLifetime'
RADVD_PREFIX_BOOLEAN_OPTIONS='AdvOnLink AdvAutonomous AdvRouterAddr'

RADVD_ROUTE_STRING_OPTIONS='AdvRouteLifetime AdvRoutePreference'
RADVD_ROUTE_BOOLEAN_OPTIONS=''

RADVD_RDNSS_STRING_OPTIONS='AdvRDNSSPreference AdvRDNSSLifetime'
RADVD_RDNSS_BOOLEAN_OPTIONS='AdvRDNSSOpen'

validate_varname() {
	local varname=$1
	[ -z "$varname" -o "$varname" != "${varname%%[!A-Za-z0-9_]*}" ] && return 1
	return 0
}

validate_ifname() {
	local ifname=$1
	[ -z "$ifname" -o "$ifname" != "${ifname%%[!A-Za-z0-9.:_-]*}" ] && return 1
	return 0
}

validate_ip6addr() {
	local ip6addr=$1
	[ -z "$ip6addr" -o "$ip6addr" != "${ip6addr%%[!A-Fa-f0-9.:]*}" ] && return 1
	return 0
}

validate_ip6prefix() {
	local ip6prefix=$1
	[ -z "$ip6prefix" -o "$ip6prefix" != "${ip6prefix%%[!A-Fa-f0-9./:]*}" ] && return 1
	return 0
}

validate_radvd_string() {
	local radvd_string=$1
	[ -z "$radvd_string" -o "$radvd_string" != "${radvd_string%%[!a-z0-9.:_-]*}" ] && return 1
	return 0
}

get_ifname() {
	local interface=$1
	validate_varname "$interface" || return 1
	local cfgt
	local ifname

	scan_interfaces
	config_get cfgt "$interface" TYPE
	[ "$cfgt" != "interface" ] && return 1
	config_get ifname "$interface" ifname
	validate_ifname "$ifname" || return 1
	printf '%s\n' "$ifname"

	return 0
}

get_ip6addr() {
	local ifname=$1
	local scope=$2
	local iproute2_scope
	local ifconfig_scope
	local ip6addr

	case "$scope" in
		host) iproute2_scope=host ifconfig_scope=Host;;
		link) iproute2_scope=link ifconfig_scope=Link;;
		site) iproute2_scope=site ifconfig_scope=Site;;
		global) iproute2_scope=global ifconfig_scope=Global;;
		"") get_ip6addr "$ifname" global || get_ip6addr "$ifname" site; return;;
		*) return 1;;
	esac

	ip6addr=$(LANG=C ip -f inet6 -- addr show dev "$ifname" 2> /dev/null | sed -n -e 's/^  *inet6 \([A-Fa-f0-9.:]*[/][0-9]*\) scope '"$iproute2_scope"' $/\1/p' | head -n 1)
	if [ -z "$ip6addr" ]; then
		ip6addr=$(LANG=C ifconfig "$ifname" 2> /dev/null | sed -n -e 's/^  *inet6 addr: \([A-Fa-f0-9.:]*[/][0-9]*\) Scope:'"$ifconfig_scope"'$/\1/p' | tail -n 1)
		[ -z "$ip6addr" ] && return 1
	fi

	printf '%s\n' "$ip6addr"

	return 0
}

radvd_find_config_file() {
	local cfg=$1
	validate_varname "$cfg" || return 0

	config_get_bool ignore "$cfg" ignore 0
	[ "$ignore" -ne 0 ] && return 0
	config_get RADVD_CONFIG_FILE "$cfg" config_file

	return 0
}

radvd_add_interface() {
	local cfg=$1
	validate_varname "$cfg" || return 0
	local ignore
	local interfaces
	local interface
	local list_interface
	local exist

	config_get_bool ignore "$cfg" ignore 0
	[ "$ignore" -ne 0 ] && return 0

	config_get interfaces "$cfg" interface
	for interface in $interfaces; do
		validate_varname "$interface" || continue
		exist=0
		for list_interface in $RADVD_INTERFACES; do
			[ "$interface" = "$list_interface" ] && exist=1
		done
		[ "$exist" -eq 0 ] && RADVD_INTERFACES="$RADVD_INTERFACES $interface"
	done

	return 0
}

radvd_write_interface() {
	local cfg=$1
	validate_varname "$cfg" || return 0
	local ignore
	local interfaces
	local interface
	local name
	local value

	config_get_bool ignore "$cfg" ignore 0
	[ "$ignore" -ne 0 ] && return 0

	config_get interfaces "$cfg" interface
	exist=0
	for interface in $interfaces; do
		[ "$INTERFACE" = "$interface" ] && exist=1
	done
	[ "$exist" -eq 0 ] && return 0

	for name in $RADVD_INTERFACE_STRING_OPTIONS; do
		config_get value "$cfg" "$name"
		validate_radvd_string "$value" || continue
		printf '\t%s %s;\n' "$name" "$value"
	done

	for name in $RADVD_INTERFACE_BOOLEAN_OPTIONS; do
		config_get value "$cfg" "$name"
		[ -z "$value" ] && continue
		config_get_bool value "$cfg" "$name" 0
		if [ "$value" -ne 0 ]; then 
			printf '\t%s on;\n' "$name"
		else
			printf '\t%s off;\n' "$name"
		fi
	done

	return 0
}

radvd_write_prefix() {
	local cfg=$1
	validate_varname "$cfg" || return 0
	local ignore
	local interfaces
	local interface
	local prefixes
	local prefix
	local name
	local value
	local cfgt

	config_get_bool ignore "$cfg" ignore 0
	[ "$ignore" -ne 0 ] && return 0

	config_get interfaces "$cfg" interface
	exist=0
	for interface in $interfaces; do
		[ "$INTERFACE" = "$interface" ] && exist=1
	done
	[ "$exist" -eq 0 ] && return 0

	## WenHsien.2014.0508: here should modify into the flow that could handle "multi IPs case"(?).
	#config_get prefixes "$cfg" prefix
	#if [ -z "$prefixes" ]; then
	#	prefixes=$(get_ip6addr "$IFNAME") || return 0
	#fi

	#for prefix in $prefixes; do
	
		### Set Prefix: See if it is (Static Mode / DHCP Mode) on LAN.
		## get ip and prefix
		default_static_prefix=$(uci get dhcp6c.basic.default_write_prefix)
		address=""
		prefixlen=""
		if [ "$default_static_prefix" == "0" ];then
			##  (DHCP  mode)
			group_lan=$(uci get dhcp6c.basic.intfGrp_write_prefix)
			client_interface=$(uci get dhcp6c.basic.interface)
			vlanIFNAME=$(uci get network.$client_interface.bind_LAN)

			if [ "$group_lan" == "1" ];then
				grouped_lan_prefix=$(ifconfig $vlanIFNAME | awk '/Global/{print $3}')
			fi

			if [ "$group_lan" == "0" ];then
				grouped_lan_prefix=$(ifconfig "br-lan" | awk '/Global/{print $3}')
			fi
			
			## remain the first one ip.  WenHsien.2014.0508: currently use this algorithm.
			grouped_lan_prefix=$(echo $grouped_lan_prefix |awk '{print $1}')
			
			address=$(echo $grouped_lan_prefix |awk -F \/ '{print $1}')
			prefixlen=$(echo $grouped_lan_prefix |awk -F \/ '{print $2}')	
		elif [ "$default_static_prefix" == "1" ];then
			##  (STATIC  mode)
			address=$(uci get default_lan_radvd.basic.address)
			prefixlen=$(uci get default_lan_radvd.basic.prefixlen)
		fi
		
		## calculate  m_Prefix  and  m_IP  .
		masked_prefix=""
		masked_address=""
		if [ "" != "$address" -a "" != "$prefixlen" ]; then
			res=`calc_masked_prefix "$address" "$prefixlen"`
			masked_prefix=$(echo $res |awk '{print $1}')
			masked_address=$(echo "$res" |awk '{print $2}')
		fi

		##  (STATIC  mode)  Set  default_lan_radvd  UCI Conf. /  Set  br-lan  .
		if [ "$default_static_prefix" == "1" ];then
			if [ "" != "$address" -a "" != "$prefixlen" ]; then
				## Set  default_lan_radvd  UCI Conf.
				uci set default_lan_radvd.basic.prefix=$masked_prefix
				uci set default_lan_radvd.basic.masked_address=$masked_address
				uci commit default_lan_radvd
				## Set  br-lan  .
				lan_ip=$masked_address
				if [ "" != $lan_ip ]; then
					lan_ip=$lan_ip"/64"
				fi
				ifconfig br-lan add "$lan_ip"
			fi
		fi
		
		## Set  radvd.conf  .
		prefix_for_clients=$masked_prefix
		if [ "" != $prefix_for_clients ]; then
			prefix_for_clients=$prefix_for_clients"/64"
		fi
		prefix=$prefix_for_clients
		validate_ip6prefix "$prefix" || {prefix=""}
		printf '\n\tprefix %s\n\t{\n' "$prefix"

		
		for name in $RADVD_PREFIX_STRING_OPTIONS; do
			config_get value "$cfg" "$name"
			validate_radvd_string "$value" || continue
			printf '\t\t%s %s;\n' "$name" "$value"
		done

		for name in $RADVD_PREFIX_BOOLEAN_OPTIONS; do
			config_get value "$cfg" "$name"
			[ -z "$value" ] && continue
			config_get_bool value "$cfg" "$name" 0
			if [ "$value" -ne 0 ]; then 
				printf '\t\t%s on;\n' "$name"
			else
				printf '\t\t%s off;\n' "$name"
			fi
		done

		config_get value "$cfg" Base6to4Interface
		if [ -n "$value" ]; then
			if ifname=$(get_ifname "$value"); then
				printf '\t\t%s %s;\n' "Base6to4Interface" "$ifname"
			fi
		fi

		printf '\t};\n'
	#done

	return 0
}

radvd_write_route() {
	local cfg=$1
	validate_varname "$cfg" || return 0
	local ignore
	local interfaces
	local interface
	local prefixes
	local prefix
	local name
	local value

	config_get_bool ignore "$cfg" ignore 0
	[ "$ignore" -ne 0 ] && return 0

	config_get interfaces "$cfg" interface
	exist=0
	for interface in $interfaces; do
		[ "$INTERFACE" = "$interface" ] && exist=1
	done
	[ "$exist" -eq 0 ] && return 0

	config_get prefixes "$cfg" prefix
	for prefix in $prefixes; do
		validate_ip6prefix "$prefix" || continue
		printf '\n\troute %s\n\t{\n' "$prefix"

		for name in $RADVD_ROUTE_STRING_OPTIONS; do
			config_get value "$cfg" "$name"
			validate_radvd_string "$value" || continue
			printf '\t\t%s %s;\n' "$name" "$value"
		done

		for name in $RADVD_ROUTE_BOOLEAN_OPTIONS; do
			config_get value "$cfg" "$name"
			[ -z "$value" ] && continue
			config_get_bool value "$cfg" "$name" 0
			if [ "$value" -ne 0 ]; then 
				printf '\t\t%s on;\n' "$name"
			else
				printf '\t\t%s off;\n' "$name"
			fi
		done

		printf '\t};\n'
	done

	return 0
}

radvd_write_rdnss() {
	local cfg=$1
	validate_varname "$cfg" || return 0
	local ignore
	local interfaces
	local interface
	local addrs
	local addr
	local addr_list
	local name
	local value
	local i

	config_get_bool ignore "$cfg" ignore 0
	[ "$ignore" -ne 0 ] && return 0

	config_get interfaces "$cfg" interface
	exist=0
	for interface in $interfaces; do
		[ "$INTERFACE" = "$interface" ] && exist=1
	done
	[ "$exist" -eq 0 ] && return 0

	config_get addrs "$cfg" addr
	i=0
	for addr in $addrs; do
		[ "$i" -ge 3 ] && break
		validate_ip6addr "$addr" || continue
		addr_list="$addr_list $addr"
		i=$(($i+1))
	done

	if [ -z "$addr_list" ]; then
		addr=$(get_ip6addr "$IFNAME" link) || return 0
		addr_list=" ${addr%%[/]*}"
	fi

	printf '\n\tRDNSS%s\n\t{\n' "$addr_list"

	for name in $RADVD_RDNSS_STRING_OPTIONS; do
		config_get value "$cfg" "$name"
		validate_radvd_string "$value" || continue
		printf '\t\t%s %s;\n' "$name" "$value"
	done

	for name in $RADVD_RDNSS_BOOLEAN_OPTIONS; do
		config_get value "$cfg" "$name"
		[ -z "$value" ] && continue
		config_get_bool value "$cfg" "$name" 0
		if [ "$value" -ne 0 ]; then 
			printf '\t\t%s on;\n' "$name"
		else
			printf '\t\t%s off;\n' "$name"
		fi
	done

	printf '\t};\n'

	return 0
}

radvd_write_config() {
	include /lib/network

	RADVD_INTERFACES=
	config_foreach radvd_add_interface interface
	config_foreach radvd_add_interface prefix
	config_foreach radvd_add_interface route
	config_foreach radvd_add_interface RDNSS

	group_lan=$(uci get dhcp6c.basic.intfGrp_write_prefix)
	client_interface=$(uci get dhcp6c.basic.interface)
	vlanIFNAME=$(uci get network.$client_interface.bind_LAN)

    # if [ "$group_lan" == "1" ];then
        # grouped_lan_prefix=$(ifconfig $vlanIFNAME | awk '/Global/{print $3}')
    # fi

    # if [ "$group_lan" == "0" ];then
        # grouped_lan_prefix=$(ifconfig "br-lan" | awk '/Global/{print $3}')
    # fi

	for INTERFACE in $RADVD_INTERFACES; do
	
		if [ "$group_lan" == "0" ];then
			IFNAME=$(get_ifname "$INTERFACE") || continue
			printf 'interface %s\n{\n' "$IFNAME"
			
		elif [ "$group_lan" == "1" ];then
			#vlanIFNAME=$(uci get intfGrp_v6.basic.lanface)
			IFNAME=$(get_ifname "$INTERFACE") || continue
			printf 'interface %s\n{\n' "$vlanIFNAME"
		fi
		config_foreach radvd_write_interface interface
		config_foreach radvd_write_prefix prefix
		config_foreach radvd_write_route route
		config_foreach radvd_write_rdnss rdnss
		printf '};\n\n'
	done

	return 0
}

radvd_write_config_6rd() {
	include /lib/network

	RADVD_INTERFACES=
	config_foreach radvd_add_interface interface
	config_foreach radvd_add_interface prefix
	config_foreach radvd_add_interface route
	config_foreach radvd_add_interface RDNSS

	local enable6rd=$1

	for i in $enable6rd
	do
		[ "$i" == "0" ] && i=
		pd6rd=$(uci get network.wan"$i"6rd.zyPd6rd)		

		local lanIface=
		lanIface=$(uci get network.wan"$i".bind_LAN)
		lanIface=$(echo $lanIface | cut -c 4-)	
		[ -z "$lanIface" ] && lanIface=lan
		##For radvd setting
		INTERFACE=lan
		IFNAME=br-"$lanIface"
		##write for config
		printf 'interface %s\n{\n' br-"$lanIface"
		config_foreach radvd_write_interface interface
		printf '\n\tprefix %s\n\t{\n' "$pd6rd"
                printf '\t\tAdvOnLink on; \n'
		printf '\t\tAdvAutonomous on; \n'
		printf '\t\tAdvRouterAddr off; \n'
                printf '\t};\n'
		config_foreach radvd_write_route route
		config_foreach radvd_write_rdnss rdnss
		printf '};\n\n'

	done

	return 0
}

start() {
	config_load radvd

	RADVD_CONFIG_FILE=
	config_foreach radvd_find_config_file radvd

	##for check 6RD 
	local num6rd=
	local ck6rdcall=$(cat /tmp/radvd_6rd)
	for i in "" 1 2 3 4
	do
		ck6rd_enable=$(uci get network.general.wan"$i"6rd_enable)
		[ "$ck6rd_enable" == "1" ] && {
			[ -z "$i" ] && append num6rd 0 || append num6rd "$i"
		}
	done
	
#	mkdir -p /var/lock
#	lock /var/lock/radvd.lck
	if [ -z "$RADVD_CONFIG_FILE" ]; then
		mkdir -p -- /var/etc/
		group_lan=$(uci get dhcp6c.basic.intfGrp_write_prefix)
		default_lan=$(uci get dhcp6c.basic.default_write_prefix)
		if [ "$group_lan" == "1" ];then
			radvd_write_config > /var/etc/grouped_radvd.conf
			if [ -s "/var/etc/grouped_radvd.conf" ]; then
				RADVD_CONFIG_FILE=/var/etc/grouped_radvd.conf
			fi
		elif [ "$default_lan" == "1" ];then
			radvd_write_config > /var/etc/radvd.conf
			if [ -s "/var/etc/radvd.conf" ]; then
				RADVD_CONFIG_FILE=/var/etc/radvd.conf
			fi
		elif [ -n "$num6rd" -a "$ck6rdcall" == "1" ];then
			radvd_write_config_6rd "$num6rd" > /var/etc/radvd_6rd.conf
			if [ -s "/var/etc/radvd_6rd.conf" ]; then
				RADVD_CONFIG_FILE=/var/etc/radvd_6rd.conf
			fi
			echo 0 > /tmp/radvd_6rd
		else
			radvd_write_config > /var/etc/radvd.conf
			if [ -s "/var/etc/radvd.conf" ]; then
				RADVD_CONFIG_FILE=/var/etc/radvd.conf
			fi
		fi
	fi
#	lock -u /var/lock/radvd.lck
	[ -z "$RADVD_CONFIG_FILE" ] && return 1

	client_interface=$(uci get dhcp6c.basic.interface)
        vlanIFNAME=$(uci get network.$client_interface.bind_LAN)

	##stop old radvd here to protect trigger new radvd if it fail.
	[ "$RADVD_CONFIG_FILE" == "/var/etc/radvd_6rd.conf" ] && {
		local pid6rd=$(ps |grep radvd_6rd.conf | grep "grep" -v |awk '{print $1}')
		kill -9 $pid6rd	
	} || {		
		[ -f /var/run/radvd-$vlanIFNAME.pid ] && kill -9 $(cat /var/run/radvd-$vlanIFNAME.pid)	
	}

	sysctl -w net.ipv6.conf.all.forwarding=1 > /dev/null 2> /dev/null
        #radvd -C "$RADVD_CONFIG_FILE$bind_lan" -m stderr_syslog -p /var/run/radvd.pid
        radvd -C "$RADVD_CONFIG_FILE" -m stderr_syslog -p /var/run/radvd.pid &

        cp /var/run/radvd.pid /var/run/radvd-$vlanIFNAME.pid

		## Set UCI radvd
        uci set radvd.@prefix[0].prefix=""
        uci commit radvd 
        #sleep 6 & 
		
        uci set dhcp6c.basic.intfGrp_write_prefix="0"
        uci set dhcp6c.basic.default_write_prefix="0"
        uci commit dhcp6c
		
		/etc/init.d/dhcp6s restart
}

stop() {
	#[ -f /var/run/radvd-$vlanIFNAME.pid ] && kill -9 $(cat /var/run/radvd-$vlanIFNAME.pid) 
	killall radvd
	return 1
}
