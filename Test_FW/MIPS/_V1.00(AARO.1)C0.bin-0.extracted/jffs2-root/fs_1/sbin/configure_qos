#!/bin/sh
. /etc/functions.sh
include /lib/config

config_load qos

# System settings:
BIN_IPT=$(which iptables)
BIN_TC=$(which tc)


HTB_OPT=""

#FIXME! Set the quantum is tricky and it affects bw borrowing. Need more
# study on this value.
MTU="1500"


# set minimum bandwidth to 10kbps
MINBW=30
CLASSID_APP="3"
CLASSID_SBM="6"
CLASSID_OTHER="9"

SBM_MAX=16
MIN_PRIO=1
MAX_PRIO=7

CLASS_OTHER_PRIO=7

wannum="1"

config_load network
config_get wandev wan ifname
config_get landev lan ifname
	
config_load qos
config_get LINK_DL_RATE shaper port_rate_lan
config_get LINK_UL_RATE shaper port_rate_eth0

init_mangle_chain()          
{

	# flush all the rules in the mangle tables.
#	$BIN_IPT -t mangle -F   

	# erase all chains that's not default in the mangle table.
#	$BIN_IPT -t mangle -X   
    
    LIST="EZP_RT_MARK EZP_FL_MARK EZP_BW_MARK EZP_RT_CONN_MARK EZP_RT_SET_MARK EZP_BW_SET_MARK EZP_BW_HP_SET_MARK EZP_FL_SET_MARK EZP_RT_CONN_SET_MARK"
    for chain in $LIST
    do 
    $BIN_IPT -t mangle -N $chain 2> /dev/null > /dev/null
    $BIN_IPT -t mangle  -F $chain 2> /dev/null > /dev/null
    done

    # PREROUTE
    $BIN_IPT -A PREROUTING -t mangle -j CONNMARK --restore-mark
    $BIN_IPT -A PREROUTING -t mangle -j EZP_RT_MARK

    # FORWARD
    $BIN_IPT -A FORWARD -t mangle -j EZP_FL_MARK
    $BIN_IPT -A FORWARD -t mangle -j EZP_BW_MARK

    # POSTROUTE
    $BIN_IPT -A POSTROUTING -t mangle -j EZP_RT_CONN_MARK
	
}

guest_wlan_5G_start()
{
	
	guest_wlan_5g_max_bandwidth=$(uci_get wireless ath13 guest_max_bandwidth)
	guest_wlan_5g_max_bandwidth=$guest_wlan_5g_max_bandwidth"kbit"

	tc class add dev $wandev parent 1:13 classid 1:1340 htb rate 1kbit ceil $guest_wlan_5g_max_bandwidth prio 2

	tc filter add dev $wandev parent 1: protocol ip prio 2 u32 match mark 0x001E0000 0x00FF0000 flowid 1:1340

	tc qdisc add dev $wandev parent 1:1340 handle 1340: prio
	tc qdisc add dev $wandev parent 1340:1 handle 13401: sfq perturb 9
	tc qdisc add dev $wandev parent 1340:2 handle 13402: sfq perturb 10
	tc qdisc add dev $wandev parent 1340:3 handle 13403: sfq perturb 11

	
	iptables -A EZP_BW_SET_MARK -t mangle -o $wandev -i ath13 -j MARK --set-mark 0x1E0000/0x00FF0000
	iptables -A EZP_BW_SET_MARK -t mangle -m mark --mark 0x1E0000/0x00FF0000 -j CONNMARK --save-mark
	iptables -A EZP_BW_SET_MARK -t mangle -m mark --mark 0x1E0000/0x00FF0000 -j RETURN
}


guest_wlan_24G_start()
{
	guest_wlan_24g_max_bandwidth=$(uci_get wireless ath3 guest_max_bandwidth)
	guest_wlan_24g_max_bandwidth=$guest_wlan_24g_max_bandwidth"kbit"


	tc class add dev $wandev parent 1:13 classid 1:1350 htb rate 1kbit ceil $guest_wlan_24g_max_bandwidth prio 3

	tc filter add dev $wandev parent 1: protocol ip prio 3 u32 match mark 0x001F0000 0x00FF0000 flowid 1:1350

	tc qdisc add dev $wandev parent 1:1350 handle 1350: prio
	tc qdisc add dev $wandev parent 1350:1 handle 13501: sfq perturb 9
	tc qdisc add dev $wandev parent 1350:2 handle 13502: sfq perturb 10
	tc qdisc add dev $wandev parent 1350:3 handle 13503: sfq perturb 11

	
	iptables -A EZP_BW_SET_MARK -t mangle -o $wandev -i ath3 -j MARK --set-mark 0x1F0000/0x00FF0000
	iptables -A EZP_BW_SET_MARK -t mangle -m mark --mark 0x1F0000/0x00FF0000 -j CONNMARK --save-mark
	iptables -A EZP_BW_SET_MARK -t mangle -m mark --mark 0x1F0000/0x00FF0000 -j RETURN
}


# $1 : port string
# $2 : mark
# $3 : mask
# $4 : proto
bw_set_ipt_port_mark()
{
    local port=$1
    local mark=$2
    local mask=$3
    local proto=$4
    local i=0
	
    local portstr=$(echo "$port" | sed 's/,/ /g')

    local multistr=""
    local rangestr=""
	
    for portentry in $portstr
    do
        if [ -n "$(echo $portentry | sed -n '/:/p')" ]; then
            #add a range port iptable entry
            $BIN_IPT -A EZP_BW_SET_MARK -t mangle -p $proto -o $wandev --dport $portentry -j MARK --set-mark 0x$mark/$mask	
        else
            multistr="${multistr:+$multistr,}$portentry"
        fi
    done
	
    #add a range port iptable entry
    [ -n "$multistr" ] && $BIN_IPT -A EZP_BW_SET_MARK -t mangle -p $proto -o $wandev -m multiport --dport $multistr -j MARK --set-mark 0x$mark/$mask
    $BIN_IPT -A EZP_BW_SET_MARK -t mangle -m mark --mark 0x$mark/$mask -j CONNMARK --save-mark
    $BIN_IPT -A EZP_BW_SET_MARK -t mangle -m mark --mark 0x$mark/$mask -j RETURN
	
}

bw_get_max_by_prio ()
{
    local bwceil=$1
    local prio=$2
    local maxbw=$1
    local bwratio="1"
	
    if [ -z "$prio" ]; then
        maxbw="$(($bwceil / 10))"
    else
        #bwratio="$(($prio + 1))"
        #maxbw="$(($bwceil / $bwratio))"
        #   prio 0 : 90%
        #   prio i : (100 - 20i)%
        #   prio 1 : 80%
        #   prio 2 : 60%
        #   prio 3 : 40%
        # prio > 4 : 20%
		
        [ "$prio" = "0" ] && {
            bwratio="90"
        }
		
        [ "$prio" -lt "4" ] && {
            bwratio="$((20 * $prio))"
            bwratio="$((100 - $bwratio))"
        } || {
            bwratio="20"
        }
        maxbw="$(($bwceil * $bwratio / 100))"
    fi
    echo "$maxbw"
}

bw_min_max_decide ()
{
    local bw=$1
    local minbw=$2
    local maxbw=$3
    local ismin=$4
	
    [ "$maxbw" -lt "$bw" ] && maxbw=$bw
    [ "$minbw" -lt "$bw" ] && minbw=$bw

    if [ "$ismin" = "1" ]; then
        echo "bwmin=$bw;bwmax=$maxbw"
	else
		echo "bwmin=$minbw;bwmax=$bw"
	fi

}

bw_set_leaf_node ()
{
    local dev=$1
    local parenthandle=$2
		
    # Add qdisc priority queue
	$BIN_TC qdisc add dev ${dev} parent 1:${parenthandle} handle ${parenthandle}: prio
	
	$BIN_TC qdisc add dev ${dev} parent ${parenthandle}:1 handle ${parenthandle}1: sfq perturb 9
	
	$BIN_TC qdisc add dev ${dev} parent ${parenthandle}:2 handle ${parenthandle}2: sfq perturb 10
	
	$BIN_TC qdisc add dev ${dev} parent ${parenthandle}:3 handle ${parenthandle}3: sfq perturb 11
}

# $1:if_idx (0-based) $2:nth (1-based) $3:BW_MARK 
# $4:dl_dev $5:dl_rate $6:$dl_ceil 
# $7:ul_dev $8:ul_rate $9:$ul_ceil
# we need other parameters needed to be externally defined
# PRIO : prio
# CLASSID : classid

bw_set_traffic ()
{
    NTH=$(awk "BEGIN{x=sprintf(\"%02d\", $2);print x}")
    IFIDX=$(expr $1 + 1)
    [ -z "$CLASSID" ] && CLASSID="6"
    BW_TC_MASK="0x00FF0000"

    dl_dev=$4
    dl_rate=$5
    dl_ceil=$6
    ul_dev=$7
    ul_rate=$8
    ul_ceil=$9

	# Download bandwidth
    [ -n "$dl_dev" -a -n "$dl_rate" -a -n "$dl_ceil" ] && [ "$dl_rate" != "0" -o "$dl_ceil" != "0" ] && {
	
		# Add HTB class.
		$BIN_TC class add dev ${dl_dev} parent 1:${IFIDX}${CLASSID} classid 1:${IFIDX}${CLASSID}${NTH} htb rate ${5}kbit ceil ${6}kbit quantum $MTU prio $PRIO $HTB_OPT		
		
        # Add filter for this user.
		$BIN_TC filter add dev ${dl_dev} parent 1: protocol ip prio $PRIO u32 match mark 0x00${3} $BW_TC_MASK flowid 1:${IFIDX}${CLASSID}${NTH}
		
        # Add qdisc priority queue
		s1="${ul_dev}"
		s2="${IFIDX}${CLASSID}${NTH}"
        bw_set_leaf_node "${dl_dev}" "${IFIDX}${CLASSID}${NTH}"
    }

    # Upload bandwidth
    [ -n "$ul_dev" -a -n "$ul_rate" -a -n "$ul_ceil" ] && [ "$ul_rate" != "0" -o "$ul_ceil" != "0" ] && {
	
        # Add HTB class.
		$BIN_TC class add dev ${ul_dev} parent 1:${IFIDX}${CLASSID} classid 1:${IFIDX}${CLASSID}${NTH} htb rate ${8}kbit ceil ${9}kbit quantum $MTU prio $PRIO $HTB_OPT
		
        # Add filter for this user.
		$BIN_TC filter add dev ${ul_dev} parent 1: protocol ip prio $PRIO u32 match mark 0x00${3} $BW_TC_MASK flowid 1:${IFIDX}${CLASSID}${NTH}
		
        # Add qdisc priority queue
		s1="${ul_dev}"
		s2="${IFIDX}${CLASSID}${NTH}"
        bw_set_leaf_node "${ul_dev}" "${IFIDX}${CLASSID}${NTH}"
    }
}

bw_set_wan_mark()
{
    local wanidx=0
    local wanmarkidx
	
    while [ "$wanidx" -lt "$wannum" ];
    do
        wanmarkidx="$(($wanidx + 1))"
		
        $BIN_IPT -A EZP_RT_MARK -t mangle -m mark --mark 0x0/0xFF000000 -j EZP_RT_SET_MARK
        $BIN_IPT -A EZP_RT_SET_MARK -t mangle -i $wandev -j MARK --set-mark 0x${wanmarkidx}0000000/0xFF000000
        $BIN_IPT -A EZP_RT_SET_MARK -t mangle -m mark --mark 0x0/0xFF000000 -j RETURN
        $BIN_IPT -A EZP_RT_SET_MARK -t mangle -j CONNMARK --save-mark

        $BIN_IPT -A EZP_RT_CONN_MARK -t mangle -m mark --mark 0x0/0xFF000000 -j EZP_RT_CONN_SET_MARK
        $BIN_IPT -A EZP_RT_CONN_SET_MARK -t mangle -o $wandev -j MARK --set-mark 0x${wanmarkidx}0000000/0xFF000000
        $BIN_IPT -A EZP_RT_CONN_SET_MARK -t mangle -m mark --mark 0x0/0xFF000000 -j RETURN
        $BIN_IPT -A EZP_RT_CONN_SET_MARK -t mangle -j CONNMARK --save-mark

        wanidx="$(($wanidx + 1))"
    done
}

bw_app_start ()
{

    BW_MASK="0x00FF0000"
    BW_TC_MASK="0x00FF0000"
	
    local BW_APP_RULE_NUM="11"
	
    local APP_LAN_TOTAL_RATE="0"
    local APP_WAN_TOTAL_RATE="0"
    local APP_DL_RATE=$1
    local APP_UL_RATE=$2
    
	APP_NTH=$SBM_MAX

    # TC2 note:define by benny    
	$BIN_TC class add dev ${landev} parent 1:${INDEX} classid 1:${INDEX}${CLASSID_APP} htb rate ${MINBW}kbit ceil ${APP_DL_RATE}kbit quantum $MTU $HTB_OPT
	$BIN_TC class add dev ${wandev} parent 1:${INDEX} classid 1:${INDEX}${CLASSID_APP} htb rate ${MINBW}kbit ceil ${APP_UL_RATE}kbit quantum $MTU $HTB_OPT
	
	# While2 note:define by benny
    i=0
    config_load qos	
    while [ "$i" -lt "$BW_APP_RULE_NUM" ];
    do
		config_get enable app_policy_${i} enable
        [ "$enable" = "1" ] || {
            i=$(($i + 1))
            continue;
        }
		
        # tcp bandwidth setting
		
		config_get lan_tcp_enable app_policy_${i} lan_tcp_enable
		config_get wan_tcp_enable app_policy_${i} wan_tcp_enable
		config_get tcp_port app_policy_${i} tcp_port
        [ "$lan_tcp_enable" = "1" -a "$wan_tcp_enable" = "1" ] && {
            port="$tcp_port"
            APP_MARK=$(awk "BEGIN{x=sprintf(\"%02X0000\", $APP_NTH);print x}")
			
            # iptables
			config_get serv app_policy_${i} serv
            if [ "$serv" = "BitTorrent" ]; then
				
                bw_set_ipt_port_mark " --dport 5000:65535 " "$APP_MARK" "$BW_MASK" "tcp" 
            else
                [ "$port" = "tport" ] && {
                    i=$(($i + 1))
                    continue
                }

                bw_set_ipt_port_mark "$port" "${APP_MARK}" "$BW_MASK" "tcp" 
            fi

			config_get cat app_policy_${i} cat			
			config_get serv app_policy_${i} serv			
#            echo "$cat|$serv|tcp|${APP_MARK}" >> /tmp/appmark

			# tc
            # bw_min_max_decide will output string looks like "bwmin=10;bwmax=100"
            # eval the string will get 2 variables : $bwmin and $bwmax
            # lan side bandwidth
			
			config_get prio app_policy_${i} prio
			config_get lan_tcp_min app_policy_${i} lan_tcp_min
			config_get lan_tcp_bw app_policy_${i} lan_tcp_bw			
            prio="$prio"
            ismin="$lan_tcp_min"
            sbw="$lan_tcp_bw"
			
			maxbw="$(bw_get_max_by_prio $APP_DL_RATE $prio)"
			bwstr="$(bw_min_max_decide $sbw $MINBW $maxbw $ismin)"

            eval $bwstr 		
            tcp_lan_bw=$bwmin
            tcp_lan_ceil=$bwmax

			# if the lan side tcp is disabled, set lan side tcp bandwidth to 0
			config_get lan_tcp_enable app_policy_${i} lan_tcp_enable			
            [ "$lan_tcp_enable" = "1" ] || tcp_lan_bw="0"
            APP_LAN_TOTAL_RATE="$(($APP_LAN_TOTAL_RATE + $tcp_lan_bw))"
			           
			# wan
			config_get wan_tcp_min app_policy_${i} wan_tcp_min
			config_get wan_tcp_bw app_policy_${i} wan_tcp_bw			
            ismin="$wan_tcp_min"
            sbw="$wan_tcp_bw"
			
            maxbw="$(bw_get_max_by_prio $APP_UL_RATE $prio)"
            bwstr="$(bw_min_max_decide $sbw $MINBW $maxbw $ismin)"

            eval $bwstr
            tcp_wan_bw=$bwmin
            tcp_wan_ceil=$bwmax
			
			# if the wan side tcp is disabled, set wan side tcp bandwidth to 0
			config_get wan_tcp_enable app_policy_${i} wan_tcp_enable			
            [ "$wan_tcp_enable" = "1" ] || tcp_wan_bw="0"
            APP_WAN_TOTAL_RATE="$(($APP_WAN_TOTAL_RATE + $tcp_wan_bw))"
	
            PRIO="$prio" 
			CLASSID="$CLASSID_APP" 
			
			bw_set_traffic "0" $APP_NTH $APP_MARK $landev $tcp_lan_bw $tcp_lan_ceil $wandev $tcp_wan_bw $tcp_wan_ceil
			
			MNTH=$(awk "BEGIN{x=sprintf(\"%02d\", $APP_NTH);print x}")

			config_get cat app_policy_${i} cat			
			config_get serv app_policy_${i} serv			
			echo "$cat|$serv|tcp|1${CLASSID_APP}${MNTH}" >> /tmp/appmark
            
			APP_NTH="$(($APP_NTH + 1))"
			
        }
		
		
        # udp bandwidth setting
		
		config_get lan_udp_enable app_policy_${i} lan_udp_enable
		config_get wan_udp_enable app_policy_${i} wan_udp_enable
		config_get udp_port app_policy_${i} udp_port		
        [ "$lan_udp_enable" = "1" -a "$wan_udp_enable" = "1" ] && {
            port="$udp_port"
            APP_MARK=$(awk "BEGIN{x=sprintf(\"%02X0000\", $APP_NTH);print x}")
			
            # iptables
			config_get serv app_policy_${i} serv			
            if [ "$serv" = "BitTorrent" ]; then  
				bw_set_ipt_port_mark " --dport 5000:65535 " "$APP_MARK" "$BW_MASK" "udp" 
            else
                [ "$port" = "uport" ] && {
                    i=$(($i + 1))
                    continue
                }
				bw_set_ipt_port_mark "$port" "$APP_MARK" "$BW_MASK" "udp" 
            fi
		
			config_get cat app_policy_${i} cat			
			config_get serv app_policy_${i} serv			
 #           echo "$cat|$serv|udp|${APP_MARK}" >> /tmp/appmark
            
			# tc
            # bw_min_max_decide will output string looks like "bwmin=10;bwmax=100"
            # eval the string will get 2veriables : $bwmin and $bwmax
            # lan

			config_get lan_udp_min app_policy_${i} lan_udp_min
			config_get lan_udp_bw app_policy_${i} lan_udp_bw				
            ismin="$lan_udp_min"
            sbw="$lan_udp_bw"
			
            maxbw="$(bw_get_max_by_prio $APP_DL_RATE $prio)"
            bwstr="$(bw_min_max_decide $sbw ${MINBW} $maxbw $ismin)"
            eval $bwstr
            udp_lan_bw=$bwmin
            udp_lan_ceil=$bwmax
			
            # if the lan side udp is disabled, set lan side udp bandwidth to 0
			config_get lan_udp_enable app_policy_${i} lan_udp_enable			
            [ "$lan_udp_enable" = "1" ] || udp_lan_bw="0"
            APP_LAN_TOTAL_RATE="$(($APP_LAN_TOTAL_RATE + $udp_lan_bw))"

            # wan
			config_get wan_udp_min app_policy_${i} wan_udp_min
			config_get wan_udp_bw app_policy_${i} wan_udp_bw				
            ismin="$wan_udp_min"
            sbw="$wan_udp_bw"
			
            maxbw="$(bw_get_max_by_prio $APP_UL_RATE $prio)"
			bwstr="$(bw_min_max_decide $sbw ${MINBW} $maxbw $ismin)"
			
            eval $bwstr
            udp_wan_bw=$bwmin
            udp_wan_ceil=$bwmax
			
            # if the wan side udp is disabled, set wan side udp bandwidth to 0
			config_get wan_udp_enable app_policy_${i} wan_udp_enable			
            [ "$wan_udp_enable" = "1" ] || udp_wan_bw="0"
            APP_WAN_TOTAL_RATE="$(($APP_WAN_TOTAL_RATE + $udp_wan_bw))"
			
            PRIO="$prio" 
			CLASSID="$CLASSID_APP" 

			bw_set_traffic "0" $APP_NTH $APP_MARK $landev $udp_lan_bw $udp_lan_ceil $wandev $udp_wan_bw $udp_wan_ceil			
			
			MNTH=$(awk "BEGIN{x=sprintf(\"%02d\", $APP_NTH);print x}")
			
			config_get cat app_policy_${i} cat			
			config_get serv app_policy_${i} serv						
            echo "$cat|$serv|udp|1${CLASSID_APP}${MNTH}" >> /tmp/appmark
            APP_NTH="$(($APP_NTH + 1))"
        }

		i=$(($i + 1))
    done

    APP_MARK=$(awk "BEGIN{x=sprintf(\"%02X0000\", $APP_NTH);print x}")
 
    PRIO="${MIN_PRIO}" 
	CLASSID="$CLASSID_APP"

	bw_set_traffic "0" $APP_NTH $APP_MARK $landev $MINBW $APP_DL_RATE $wandev $MINBW $APP_UL_RATE

	wifi_hw_on=$(cat /tmp/wlan_on)
	
	##2.4G##
	wifi_disabled_24G=$(uci_get wireless ath0 disabled)     
	wifi_ath3_disabled=$(uci_get wireless ath3 disabled)
	guest_wlan_enable_24G=$(uci_get wireless ath3 enable_guest_wlan)
	guest_bandwidth_manage_24G=$(uci_get wireless ath3 guest_bandwidth_enable)	

	# if HW&GUI button & ath3 & guest wlan & bandwidth_manage all enabled, do 2.4G guest wlan
	[ "$wifi_hw_on" == "1" ] && [ "$wifi_disabled_24G" == "0" ] && 
		[ "$wifi_ath3_disabled" == "0" ] && [ "$guest_wlan_enable_24G" == "1" ] && 
		[ "$guest_bandwidth_manage_24G" == "1" ] && {
		
	guest_wlan_24G_start
	APP_WAN_TOTAL_RATE="$(($APP_WAN_TOTAL_RATE + 1))"
	}
	
	##5G##
	wifi_disabled_5G=$(uci_get wireless ath10 disabled)		#Wifi GUI button
	wifi_ath13_disabled=$(uci_get wireless ath13 disabled)		#ath13 GUI button
	guest_wlan_enable_5G=$(uci_get wireless ath13 enable_guest_wlan)				#ath13 guest_wlan GUI button
	guest_bandwidth_manage_5G=$(uci_get wireless ath13 guest_bandwidth_enable)		#ath13 bandwidth_manage GUI button

	# if HW&GUI button & ath13 & guest wlan & bandwidth_manage all enabled, do 5G guest wlan 
	[ "$wifi_hw_on" == "1" ] && [ "$wifi_disabled_5G" == "0" ] && 
		[ "$wifi_ath13_disabled" == "0" ] && [ "$guest_wlan_enable_5G" == "1" ] && 
		[ "$guest_bandwidth_manage_5G" == "1" ] && { 
	
	guest_wlan_5G_start
	APP_WAN_TOTAL_RATE="$(($APP_WAN_TOTAL_RATE + 1))"
	}	

    APP_WAN_TOTAL_RATE="$(($APP_WAN_TOTAL_RATE + $MINBW))"
    APP_LAN_TOTAL_RATE="$(($APP_LAN_TOTAL_RATE + $MINBW))"
	
    # pkt port
    # pkt tcp flags
    # bw set to minimum with quarter ceil
    [ -n " ${APP_LAN_TOTAL_RATE}" ] && { 
	$BIN_TC class change dev ${landev} parent 1:${INDEX} classid 1:${INDEX}${CLASSID_APP} htb rate ${APP_LAN_TOTAL_RATE}kbit ceil ${APP_DL_RATE}kbit quantum $MTU $HTB_OPT
    }
	[ -n " ${APP_WAN_TOTAL_RATE}" ] && {
	$BIN_TC class change dev ${wandev} parent 1:${INDEX} classid 1:${INDEX}${CLASSID_APP} htb rate ${APP_WAN_TOTAL_RATE}kbit ceil ${APP_UL_RATE}kbit quantum $MTU $HTB_OPT
	}
	
    echo "APP_DL_RATE=$APP_LAN_TOTAL_RATE;APP_UL_RATE=$APP_WAN_TOTAL_RATE"

}


bw_start()
{
    bw_stop

    if [ "`lsmod | grep 'sch_htb'`" == "" ]; then

      insmod sch_htb

    fi

    insmod cls_u32
    insmod sch_prio
    insmod sch_sfq

    # Decide direction	
    BW_MASK="0x00FF0000"
    BW_TC_MASK="0x00FF0000"
    MAX_PRIO="0"
    INDEX=1
    i=0

    echo -n "" > /tmp/appmark
	
    # Root QDisc:
    $BIN_TC qdisc add dev $wandev root handle 1: htb default 13
    $BIN_TC qdisc add dev $landev root handle 1: htb default 13

		
	# TC1 note:define by benny
    $BIN_TC class add dev $landev parent 1: classid 1:$INDEX htb rate ${LINK_DL_RATE}kbit ceil ${LINK_DL_RATE}kbit quantum $MTU $HTB_OPT
    $BIN_TC class add dev $wandev parent 1: classid 1:$INDEX htb rate ${LINK_UL_RATE}kbit ceil ${LINK_UL_RATE}kbit quantum $MTU $HTB_OPT
	
    # iptables, add a "ff" as default mark for all packet
    $BIN_IPT -A EZP_BW_MARK -t mangle -m mark --mark 0x000000/$BW_MASK -j EZP_BW_SET_MARK
    $BIN_IPT -A EZP_BW_MARK -t mangle -j EZP_BW_HP_SET_MARK
    $BIN_IPT -I EZP_BW_SET_MARK -t mangle -j MARK --set-mark 0xff0000/$BW_MASK

    # Single wan
    # SBM calculate total class bw
	j=0
	k=1
    SBM_RULE_NUM="10"   									
    SBM_DL_RATE="0"
    SBM_UL_RATE="0"
	
    config_load qos		
    while [ $j -lt $SBM_RULE_NUM ];
    do
		config_get enable eg_policy_${k} enable
        [ "$enable" = "0" ] && {
			k=$((k+1))
            j=$((j+1))
            continue
        }
        # tc
		config_get reserve_bw eg_policy_${k} reserve_bw
		if [ "$reserve_bw" = "2" ]; then
			config_get bw_tolan eg_policy_${k} bw_tolan
            DL_RATE="$bw_tolan"
            [ -z "$DL_RATE" -o "$DL_RATE" = "0" ] && DL_RATE="$MINBW"
			config_get bw_towan eg_policy_${k} bw_towan
            UL_RATE="$bw_towan"
            [ -z "$UL_RATE" -o "$UL_RATE" = "0" ] && UL_RATE="$MINBW"
        else
            DL_RATE="$MINBW"
            UL_RATE="$MINBW"
        fi
        SBM_DL_RATE=$(($SBM_DL_RATE + $DL_RATE))
        SBM_UL_RATE=$(($SBM_UL_RATE + $UL_RATE))

		k=$(($k+1))
        j=$(($j+1))
    done
	
    # setup application bandwidth management
    app_rate_str="$(bw_app_start $LINK_DL_RATE $LINK_UL_RATE)"
	
    eval "${app_rate_str}"
     
	[ "${SBM_DL_RATE}" != "0" ] && {
        SBM_DL_TOT=$LINK_DL_RATE
        [ -n "$APP_DL_RATE" ] && SBM_DL_TOT=$(($LINK_DL_RATE - $APP_DL_RATE))
		$BIN_TC class add dev ${landev} parent 1:${INDEX} classid 1:${INDEX}${CLASSID_SBM} htb rate ${SBM_DL_RATE}kbit ceil ${SBM_DL_TOT}kbit prio ${MIN_PRIO} quantum $MTU $HTB_OPT
	}
    
    [ "${SBM_UL_RATE}" != "0" ] && {
        SBM_UL_TOT=$LINK_UL_RATE
        [ -n "$APP_UL_RATE" ] && SBM_UL_TOT=$(($LINK_UL_RATE - $APP_UL_RATE))
		$BIN_TC class add dev ${wandev} parent 1:${INDEX} classid 1:${INDEX}${CLASSID_SBM} htb rate ${SBM_UL_RATE}kbit ceil ${SBM_UL_TOT}kbit prio ${MIN_PRIO} quantum $MTU $HTB_OPT
	}
	
    # min bw
    USED_DL_RATE=$SBM_DL_RATE

    [ -n "$APP_DL_RATE" ] && USED_DL_RATE="$(($SBM_DL_RATE + $APP_DL_RATE))"
    REMAIN_DL_RATE="${MINBW}"
	
    [ "${USED_DL_RATE}" -lt "${LINK_DL_RATE}" ] && {
        REMAIN_DL_RATE="$(($LINK_DL_RATE - $USED_DL_RATE))"
    }
	
    # min bw
    USED_UL_RATE=$SBM_UL_RATE
	  
	[ -n "$APP_UL_RATE" ] && USED_UL_RATE="$((${SBM_UL_RATE} + $APP_UL_RATE))"
    REMAIN_UL_RATE="${MINBW}"
	  
	[ "${USED_UL_RATE}" -lt "${LINK_UL_RATE}" ] && {
        REMAIN_UL_RATE="$(($LINK_UL_RATE - $USED_UL_RATE))"
    }
	
    j=0
	k=1
    BW_NTH=1
    SBM_DL_RATE="0"
    SBM_UL_RATE="0"

	# while2 note:define by benny
    while [ "$j" -lt "$SBM_RULE_NUM" ];
    do
		config_get enable eg_policy_${k} enable	
        [ "$enable" = "0" ] && {
            j=$((j+1))
		    k=$((k+1))			
            continue
        }

        # iptables
        SBM_ARGS=""
        SBM_MARK=$(awk "BEGIN{x=sprintf(\"%02X\", $BW_NTH);print x}")
        MARK="${SBM_MARK}0000"

        # tc
		config_get prio eg_policy_${k} prio			
        prio="$prio"

		config_get reserve_bw eg_policy_${k} reserve_bw			
        if [ "$reserve_bw" = "2" ]; then
            DL_CEIL=$(bw_get_max_by_prio "$SBM_DL_TOT" "$prio")
            UL_CEIL=$(bw_get_max_by_prio "$SBM_UL_TOT" "$prio")

		    config_get bw_tolan eg_policy_${k} bw_tolan			
			config_get bw_towan eg_policy_${k} bw_towan
            DL_RATE=$bw_tolan
            UL_RATE=$bw_towan

            # We disable end traffic if set to use reserved bandwidth but
            # reservation is 0
            [ -z "$DL_RATE" -o "$DL_RATE" = "0" ] && DL_CEIL="0"
            [ -z "$UL_RATE" -o "$UL_RATE" = "0" ] && UL_CEIL="0"
            [ "$DL_CEIL" -lt "$DL_RATE" ] && DL_CEIL=$DL_RATE
            [ "$UL_CEIL" -lt "$UL_RATE" ] && UL_CEIL=$UL_RATE
        else
            DL_RATE="$MINBW"
            UL_RATE="$MINBW"

		    config_get bw_tolan eg_policy_${k} bw_tolan				
            DL_CEIL=$bw_tolan
            if [ -z "$DL_CEIL" -o "$DL_CEIL" = "0" ]; then
                DL_RATE="0"
                DL_CEIL="0"
            elif [ "$DL_CEIL" != "0" -a "$DL_CEIL" -lt "$DL_RATE" ]; then
                DL_CEIL="$DL_RATE"
            fi

			config_get bw_towan eg_policy_${k} bw_towan
            UL_CEIL=$bw_towan
            if [ -z "$UL_CEIL" -o "$UL_CEIL" = "0" ]; then
                UL_RATE="0"
                UL_CEIL="0"
            elif [ "$UL_CEIL" != "0" -a "$UL_CEIL" -lt "$UL_RATE" ]; then
                UL_CEIL="$UL_RATE"
            fi
        fi
        SBM_DL_RATE=$(($SBM_DL_RATE + $DL_RATE))
        SBM_UL_RATE=$(($SBM_UL_RATE + $UL_RATE))
		
        # prio
		config_get prio eg_policy_${k} prio
        PRIO="$prio" 
		CLASSID=$CLASSID_SBM
	
		bw_set_traffic $i $BW_NTH $MARK $landev $DL_RATE $DL_CEIL $wandev $UL_RATE $UL_CEIL
        MNTH=$(awk "BEGIN{x=sprintf(\"%02d\", $BW_NTH);print x}")

		config_get name eg_policy_${k} name
		config_get proto eg_policy_${k} proto
		
        echo "$name|$name|$proto|$(($i + 1))${CLASSID_SBM}${MNTH}" >> /tmp/appmark
        [ "$MAX_PRIO" -le "$PRIO" ] && {
            MAX_PRIO=$(($PRIO + 1))
			[ -z "$PRIO" ] && {
				MAX_PRIO="0"
			}			
        }

        j=$(($j+1))
		k=$(($k+1))
        BW_NTH=$(($BW_NTH+1))
    done
	
    # download
    $BIN_TC class add dev ${landev} parent 1:${INDEX} classid 1:${INDEX}${CLASSID_OTHER} htb rate ${MINBW}kbit ceil ${REMAIN_DL_RATE}kbit prio $CLASS_OTHER_PRIO quantum $MTU $HTB_OPT

    # Remain class ID
    $BIN_TC filter add dev ${landev} parent 1: protocol ip u32 match mark 0x10000000 0xFF000000 flowid 1:${INDEX}${CLASSID_OTHER}

    bw_set_leaf_node "${landev}" "${INDEX}${CLASSID_OTHER}"

    # upload
    $BIN_TC class add dev ${wandev} parent 1:${INDEX} classid 1:${INDEX}${CLASSID_OTHER} htb rate ${MINBW}kbit ceil ${REMAIN_UL_RATE}kbit prio $CLASS_OTHER_PRIO quantum $MTU $HTB_OPT

    # Remain class ID
    $BIN_TC filter add dev ${wandev} parent 1: protocol ip prio $MAX_PRIO u32 match mark 0x10000000 0xFF000000 flowid 1:${INDEX}${CLASSID_OTHER}

    bw_set_leaf_node "${wandev}" "${INDEX}${CLASSID_OTHER}"

    # SBM
    BW_NTH=1
	
    i=0
	k=1
    while [ $i -lt $SBM_RULE_NUM ];
    do
		config_get enable eg_policy_${k} enable
        [ "$enable" = "0" ] && {
            i=$((i+1))
			k=$((k+1))
            continue
        }

        SBM_ARGS=""
        SBM_RANGE_ARGS=""
		config_get inipaddr_start eg_policy_${k} inipaddr_start
		config_get inipaddr_end eg_policy_${k} inipaddr_end
        INIPADDR_END=$inipaddr_end		

		if [ "$inipaddr_start" = "0.0.0.0" ]; then
			INIPADDR_START=""
		else
			INIPADDR_START=$inipaddr_start
		fi
		
        [ -n "$INIPADDR_START" ] && {
            if [ -n "$INIPADDR_END" ]; then
                SBM_RANGE_ARGS=" -m iprange --src-range $INIPADDR_START-$INIPADDR_END "
            else
                SBM_ARGS="$SBM_ARGS -s $INIPADDR_START"
            fi
        }

		config_get outipaddr_start eg_policy_${k} outipaddr_start
		config_get outipaddr_end eg_policy_${k} outipaddr_end
        OUTIPADDR_END=$outipaddr_end
		
		if [ "$outipaddr_start" = "0.0.0.0" ]; then
			OUTIPADDR_START=""
		else
			OUTIPADDR_START=$outipaddr_start
		fi

        [ -n "$OUTIPADDR_START" ] && {
			if [ -n "$OUTIPADDR_END" ]; then
                [ -z "$SBM_RANGE_ARGS" ] && SBM_RANGE_ARGS=" -m iprange "
                SBM_RANGE_ARGS=" $SBM_RANGE_ARGS --dst-range $OUTIPADDR_START-$OUTIPADDR_END "
			else
                SBM_ARGS="$SBM_ARGS -d $OUTIPADDR_START"
            fi
        }

        SBM_MARK=$(awk "BEGIN{x=sprintf(\"%02X\", $BW_NTH);print x}")
        MARK="${SBM_MARK}0000"
		config_get proto eg_policy_${k} proto
        PROTO=$proto
		
        [ "$PROTO" == "both" ] && {
            PROTO="tcp"
            # Add another "udp" protocol
            PROTO1="udp"
            SBM_ARGS1=$SBM_ARGS
        }

        # TCP or UDP or user defined protocol
        [ -n "$PROTO" ] && {
            SBM_ARGS="$SBM_ARGS -p $PROTO"
			
        }

        [ -n "$PROTO1" ] && {
            SBM_ARGS1="$SBM_ARGS1 -p $PROTO1"
        }

        # TCP or UDP
        [ "$PROTO" = "tcp" -o "$PROTO" = "udp" ] && {

		config_get inport eg_policy_${k} inport
		config_get outport eg_policy_${k} outport
		INPORT=$inport
        OUTPORT=$outport

		[ "$INPORT" = "0" ] && INPORT=""
            INPORT=${INPORT:+ --sport $INPORT}
        
		[ "$OUTPORT" = "0" ] && OUTPORT=""
            OUTPORT=${OUTPORT:+ --dport $OUTPORT}
        
		SBM_ARGS="$SBM_ARGS $INPORT $OUTPORT"
        
		}
		
        [ "$PROTO1" = "tcp" -o "$PROTO1" = "udp" ] && {
            SBM_ARGS1="$SBM_ARGS1 $INPORT $OUTPORT"
		}

        $BIN_IPT -A EZP_BW_SET_MARK -t mangle $SBM_ARGS $SBM_RANGE_ARGS -j MARK --set-mark 0x$MARK/$BW_MASK
		
        [ -n "$PROTO1" ] && {
            $BIN_IPT -A EZP_BW_SET_MARK -t mangle $SBM_ARGS1 $SBM_RANGE_ARGS -j MARK --set-mark 0x$MARK/$BW_MASK
		}
		
        $BIN_IPT -A EZP_BW_SET_MARK -t mangle -m mark --mark 0x$MARK/$BW_MASK -j CONNMARK --save-mark

        $BIN_IPT -A EZP_BW_SET_MARK -t mangle -m mark --mark 0x$MARK/$BW_MASK -j RETURN
		
        [ "$DEBUG_ON_MASK" = "1" ] && {
            $BIN_IPT -A EZP_BW_MARK -t mangle -m mark --mark 0x$MARK/$BW_MASK -j RETURN
        }
		
        config_get name eg_policy_${k} name		
#        echo "$name|$name|$PROTO|${MARK}" >> /tmp/appmark
        
		i=$(($i+1))
		k=$(($k+1))
        BW_NTH=$(($BW_NTH+1))
    done
		
    bw_set_wan_mark

}

bw_stop()
{

	config_get enable general enable
	
	wifi_hw_on=$(cat /tmp/wlan_on)
	##2.4G##
	wifi_disabled_24G=$(uci_get wireless ath0 disabled)     
	wifi_ath3_disabled=$(uci_get wireless ath3 disabled)
	guest_wlan_enable_24G=$(uci_get wireless ath3 enable_guest_wlan)
	guest_bandwidth_manage_24G=$(uci_get wireless ath3 guest_bandwidth_enable)

	##5G##
	wifi_disabled_5G=$(uci_get wireless ath10 disabled)	
	wifi_ath13_disabled=$(uci_get wireless ath13 disabled)
	guest_wlan_enable_5G=$(uci_get wireless ath13 enable_guest_wlan)	
	guest_bandwidth_manage_5G=$(uci_get wireless ath13 guest_bandwidth_enable)

	$BIN_IPT -t mangle -F EZP_BW_SET_MARK
	$BIN_IPT -t mangle -F EZP_BW_HP_SET_MARK
	$BIN_IPT -t mangle -F EZP_BW_MARK
	$BIN_IPT -t mangle -F EZP_RT_MARK
	$BIN_IPT -t mangle -F EZP_RT_SET_MARK
	$BIN_IPT -t mangle -F EZP_RT_CONN_MARK
	$BIN_IPT -t mangle -F EZP_RT_CONN_SET_MARK

	if [ "$enable" == "1" ]; then
				
		$BIN_TC qdisc del dev $wandev root 2> /dev/null
		$BIN_IPT -t mangle -D PREROUTING -i ath3 -j MARK --set-mark 10
		$BIN_IPT -t mangle -D PREROUTING -i ath13 -j MARK --set-mark 20

	else		
		## if HW&GUI button & ath3 & guest_wlan_enable_24G & bandwidth_manage all enabled, do 2.4G guest wlan
		if [ "$wifi_hw_on" == "1" ] && [ "$wifi_disabled_24G" == "0" ] && 
			[ "$wifi_ath3_disabled" == "0" ] && [ "$guest_wlan_enable_24G" == "1" ] &&
			[ "$guest_bandwidth_manage_24G" == "1" ]; then 

			if [ "`lsmod | grep 'sch_htb'`" == "" ]; then
				#for guest WLAN
				insmod sch_htb
			fi

			guest_wlan start ath3	

		## if HW&GUI button & ath13 & guest_wlan_enable_5G & bandwidth_manage all enabled, do 5G guest wlan 
		elif [ "$wifi_hw_on" == "1" ] && [ "$wifi_disabled_5G" == "0" ] && 
			[ "$wifi_ath13_disabled" == "0" ] && [ "$guest_wlan_enable_5G" == "1" ] && 
			[ "$guest_bandwidth_manage_5G" == "1" ]; then 

			if [ "`lsmod | grep 'sch_htb'`" == "" ]; then
				#for guest WLAN
				insmod sch_htb
			fi

			guest_wlan_5G start ath13

		else
			$BIN_TC qdisc del dev $wandev root 2> /dev/null
		fi
		
	fi
	
	$BIN_TC qdisc del dev $landev root 2> /dev/null > /dev/null

	#rmmod sch_htb
	rmmod cls_u32
	rmmod sch_prio
	rmmod sch_sfq	
}

include /lib/wifi
	
case "$1" in
    init)
        init_mangle_chain
    ;;
    start)
        bw_start
    ;;
	stop)
        bw_stop
    ;;
    *)
        $1_$2 
    ;;
esac

