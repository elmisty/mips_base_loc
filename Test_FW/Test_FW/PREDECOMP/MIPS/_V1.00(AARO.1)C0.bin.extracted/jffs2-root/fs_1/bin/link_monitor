#!/bin/sh

#after reading/writing data on USB, it will release cash memory
top -n 1 > /tmp/top_log &
sleep 1

io_value=$( cat /tmp/top_log | grep "CPU:" | awk '{print $10}' | awk '{FS="%"} {print $1}' )

if [ $io_value -ge 1 ] ;then
	echo 0 > /tmp/io_value_sum
fi

rm /tmp/top_log

if [ -f /tmp/io_value_sum ] ;then

	io_value_sum=$(cat /tmp/io_value_sum)
	sum=$(($io_value_sum+1))

	echo $sum > /tmp/io_value_sum	
	
	if [ $sum -eq 30 ] ;then
		echo 3 > /proc/sys/vm/drop_caches
		rm /tmp/io_value_sum
	fi
	
fi

#check uhttpd daemon
system_min_time=$(date +%M)
time=$(($system_min_time%10))

if [ "$time" == "0" ] ;then

	if [ ! -f /tmp/uhttpd_restart ] ;then
		
		touch /tmp/uhttpd_restart
			
		top -n 1 > /tmp/top_log &
		sleep 1

		parser_words=$( cat /tmp/top_log | grep "/usr/sbin/uhttpd" | sed '2,100d' | awk '{print $7}' | awk '{FS="%"} {print $1}' )
			
		if [ $parser_words -ge 40 ] ;then

			echo "$parser_words" >> /tmp/uhttpd_logs		
			echo "1" > /tmp/uhttpd_restart
			/etc/init.d/uhttpd restart
				
		fi

		rm /tmp/top_log
			
	fi
	
fi
	
if [ "$time" == "1" ] ;then

	if [ -f /tmp/uhttpd_restart ] ;then
		
		rm /tmp/uhttpd_restart
			
	fi
	
fi

##chk_5Gwifi
boot_count=$(cat /tmp/wifibootcount | wc -l)
wifi_moni=$(iwconfig ath10| grep "Not-Associated")
[ -n "$wifi_moni" ] && [ $(expr $boot_count) -le 5 ] && {
        echo 1 >/tmp/chkflag
        sleep 20
        ckwifi=$(cat /tmp/chkflag)
        wifi_moni2=$(iwconfig ath10| grep "Not-Associated")
        [ -n "$wifi_moni2" ] && [ -n "$ckwifi" ] && {
                /etc/init.d/wireless stop
                sleep 1
                /etc/init.d/wireless start
                echo 1 >>/tmp/wifibootcount
                rm /tmp/chkflag
        }
}

## wan: port 4

wan_link_status=$(/sbin/swconfig dev eth0 port 5 get link | grep down)
wan_link_ckeck=$(cat /tmp/wan_link_status)
wan_proto=$(uci get network.wan.proto)

[ "$wan_proto" == "static" ] && exit 1

if [ -z "$wan_link_status" -a "$wan_link_ckeck" == "0" ] ;then

	ubus call network reload
	##restart wan interface	
	ifup wan
	##restart 6rd -- not support multiple wan now.
	local ck6rdwan=$(uci get network.general.wan6rd_enable)
	[ "$ck6rdwan" == "1" ] && ifup wan6rd || ifdown wan6rd
        #internet_led
	echo 1 > /tmp/wan_link_status

	local ath13_disabled_5G=$(iwconfig ath13| grep ESSID)
	local guest_wlan_5G_enabled=$(uci get wireless.ath13.enable_guest_wlan)
	local ath3_disabled_24G=$(iwconfig ath3| grep ESSID)
	local guest_wlan_24G_enabled=$(uci get wireless.ath3.enable_guest_wlan)
	#Guest WLAN 2.4G enable.
	if [ -n "$ath3_disabled_24G" ] && [ "$guest_wlan_24G_enabled" == "1" ]; then
		echo 1 >/tmp/Guest_WLAN_24G
	fi
	#Guest WLAN 5G enable.
	if [ -n "$ath13_disabled_5G" ] && [ "$guest_wlan_5G_enabled" == "1" ]; then
		echo 1 >/tmp/Guest_WLAN_5G
        fi


elif [ -n "$wan_link_status" -a "$wan_link_ckeck" == "1"  ] ;then

	[ "$wan_proto" == "dhcp" ] && ifconfig eth0 0.0.0.0 || ifconfig pppoe-wan 0.0.0.0
	echo 0 > /tmp/wan_link_status
	/sbin/led_ctrl INTERNET off

fi

local guest_wlan_24G_enabled=$(cat /tmp/Guest_WLAN_24G)
local guest_wlan_5G_enabled=$(cat /tmp/Guest_WLAN_5G)
#Guest WLAN 2.4G enable.
if [ -n "$guest_wlan_24G_enabled" ]; then
	Guest24G_pid=$(cat /tmp/run/dnsmasq.pid.ath3)
	dnsmasqExist=$(cat /proc/$Guest24G_pid/cmdline)
	[ -z "$dnsmasqExist" ] && {
		ipaddr_24G=$(uci get wireless.ath3.guest_ip)
		args_24G=$(cat /tmp/Guest_dnsmasq24G)
		dnsmasq $args_24G
		dnsmasq_pid_24G=$(ps | grep "dnsmasq -C /tmp/dnsmasq.conf -z -a $ipaddr_24G" | grep -v "grep" | awk '{print $1}')
		echo $dnsmasq_pid_24G > /var/run/dnsmasq.pid.ath3
		rm /tmp/Guest_WLAN_24G
	}
fi

#Guest WLAN 5G enable.
if [ -n "$guest_wlan_5G_enabled" ]; then
	Guest5G_pid=$(cat /tmp/run/dnsmasq.pid.ath13)
	dnsmasq5GExist=$(cat /proc/$Guest5G_pid/cmdline)
	[ -z "$dnsmasq5GExist" ] && {
		ipaddr_5G=$(uci get wireless.ath13.guest_ip)
		args_5G=$(cat /tmp/Guest_dnsmasq5G)
		dnsmasq $args_5G
		dnsmasq_pid_5G=$(ps | grep "dnsmasq -C /tmp/dnsmasq.conf -z -a $ipaddr_5G" | grep -v "grep" | awk '{print $1}')
		echo $dnsmasq_pid_5G > /var/run/dnsmasq.pid.ath13
		rm /tmp/Guest_WLAN_5G
	}
fi
